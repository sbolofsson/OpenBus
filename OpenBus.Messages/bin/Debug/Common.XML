<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common</name>
    </assembly>
    <members>
        <member name="T:Common.Messages.Responses.WeatherResponse">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Responses.Response">
            <summary>
            A response to a request.
            This does not have to be sent, but it is considered good practise.
            </summary>
        </member>
        <member name="T:Common.Contracts.BusMessage">
            <summary>
            Base class defining events
            </summary>
        </member>
        <member name="F:Common.Contracts.BusMessage._messageId">
            <summary>
            A unique ID for the message
            Should be autogenerated with Guid.NewGuid()
            </summary>
        </member>
        <member name="F:Common.Contracts.BusMessage._time">
            <summary>
            Time of creation
            This field is used for weak sequencing and therefore the time should reflect the exact time where data was put in the message.
            </summary>
        </member>
        <member name="M:Common.Contracts.BusMessage.ToString">
            <summary>
            Prints an event well formated.
            Use for debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Contracts.BusMessage.GetKnownTypes">
            <summary>
            Gets called by WCF at run time to determine valid sub classes
            </summary>
            <returns></returns>
        </member>
        <member name="P:Common.Contracts.BusMessage.Origin">
            <summary>
            The subsystem where the message came from.
            This field is set by the bus to reflect identity provided by senders certificate.
            </summary>
        </member>
        <member name="P:Common.Messages.Responses.Response.ResourceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Responses.Response.Success">
            <summary>
            All responses should have an indication of the request was a success.
            If for some reason this is not applicaple set it to true.
            </summary>
        </member>
        <member name="P:Common.Messages.Responses.Response.ResponseTo">
            <summary>
            This Id should correspond to the Id of the senders message
            </summary>
        </member>
        <member name="P:Common.Messages.Responses.Response.ErrorMessage">
            <summary>
            If there was an error executing the request this text should briefly explain what went wrong.
            </summary>
        </member>
        <member name="P:Common.Messages.Responses.Response.Error">
            <summary>
            If there was an error, this error type can be used to handle the exception.
            </summary>
        </member>
        <member name="P:Common.Messages.Responses.WeatherResponse.Forecast">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.PLC.TemperatureRequest">
            <summary>
            The default Guid will affect the whole system.
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.Request">
            <summary>
            Used for requesting something (to be done)
            For each request there is a 0..1 response-types which has to be agreed with the provider.
            If no response is required it is like a void method.
            </summary>
        </member>
        <member name="F:Common.Messages.Requests.Request._time">
            <summary>
            Determines when the requestor is no longer interested in a result.
            Note that receivers can disregard this value and a response might come back later than specified.
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.Request.ResourceId">
            <summary>
            The default guid of zeros will in some cases indicate the whole system i.e. with temperture.
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.Request.ResponseWanted">
            <summary>
            Indicate if a response is wanted.
            If false the it is like a void method.
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.Request.Expiry">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.PLC.TemperatureRequest.SetPoint">
             <summary>
            
             </summary>
        </member>
        <member name="T:Common.Messages.Requests.IHC.LightRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.IHC.LightRequest.State">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.IHC.LightRequest.SetPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.IHC.DoorLockRequest">
            <summary>
            This can lock and unlock the door.
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.IHC.DoorLockRequest.State">
            <summary>
            The requested state of the door.
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.IHC.PowerOutletStateRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.StateRequest">
            <summary>
            This message type requests the state of the item(group) identified by the id
            If empty it is considered a broadcast and every subsystem should send full descriptions
            </summary>
        </member>
        <member name="T:Common.Dtd.Entities.SubsystemItem">
            <summary>
            Represents a SubsystemItem
            </summary>
        </member>
        <member name="T:Common.Dtd.Entity">
            <summary>
            Base type for all database objects
            </summary>
        </member>
        <member name="M:Common.Dtd.Entity.#ctor">
            <summary>
            Default constructor, used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.Entity.#ctor(Common.Orm.Entity)">
            <summary>
            Constructor for the database
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:Common.Dtd.Entity.Id">
            <summary>
            Unique Identifier for a specific object
            </summary>
        </member>
        <member name="P:Common.Dtd.Entity.Name">
            <summary>
            Friendly name for a specific object
            </summary>
        </member>
        <member name="P:Common.Dtd.Entity.EntityType">
            <summary>
            The type of the entity
            </summary>
        </member>
        <member name="P:Common.Dtd.Entity.EntityTypeId">
            <summary>
            Type id of entity type
            </summary>
        </member>
        <member name="P:Common.Dtd.Entity.ValidValues">
            <summary>
            Valid values
            </summary>
        </member>
        <member name="P:Common.Dtd.Entity.ValueType">
            <summary>
            Datatype of for this entity
            </summary>
        </member>
        <member name="P:Common.Dtd.Entity.ValidValueType">
            <summary>
            Type definition for the valid values
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.SubsystemItem.#ctor">
            <summary>
            Default constructor, used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.SubsystemItem.#ctor(Common.Orm.SubsystemItem)">
            <summary>
            Constructor used by the database
            </summary>
            <param name="dbSubsystemItem">The database version of the subsystem item</param>
        </member>
        <member name="M:Common.Dtd.Entities.SubsystemItem.#ctor(Common.Orm.SubsystemItem,System.Boolean)">
            <summary>
            Constructor used by the database
            </summary>
            <param name="dbSubsystemItem">The database version of the subsystem</param>
            <param name="noSubsystem">The subsystem items parent</param>
        </member>
        <member name="P:Common.Dtd.Entities.SubsystemItem.Subsystem">
            <summary>
            Identifies the subsystem that the item belongs to
            </summary>
        </member>
        <member name="P:Common.Dtd.Entities.SubsystemItem.LocalId">
            <summary>
            Identifier for the subsystem, this is only used by the subsystem to crossreference local projectfiles with system Ids
            </summary>
        </member>
        <member name="T:Common.Dtd.Entities.Actuators.Window">
            <summary>
            Represents a window
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.Window.#ctor">
            <summary>
            Default constructor, used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.Window.#ctor(Common.Orm.SubsystemItem)">
            <summary>
            Constructor used by the database
            </summary>
            <param name="dbWindow"></param>
        </member>
        <member name="P:Common.Dtd.Entities.Actuators.Window.State">
            <summary>
            Current state of the window
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.PLC.HumidityRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Event">
            <summary>
            An event is a message that contains information about something that happened.
            This type should be used for time critical information as it can be specified when the data is no longer relevant.
            </summary>
        </member>
        <member name="F:Common.Messages.Events.Event._expiry">
            <summary>
            Determines when the events data is no longer relevant.
            Note that receivers can disregard this value.
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Event.ResourceId">
            <summary>
            The ressource responsible for the event. E.g. a lamp Id
            If there is no appropriate Id to use, use the subsystem Id of the sender.
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Sensors.CO2Event.CO2">
            <summary>
            A value showing the CO2-level in ppm (Parts per million) of a given resource.
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Sensors.TwillightEvent">
            <summary>
            This event is used when the light level outside drops or rises below a threshold.
            The receiver must determine whether it is getting darker or lighter.
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Sensors.TwillightEvent.IsDark">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Sensors.TemperatureEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Sensors.TemperatureEvent.Temperature">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Sensors.TemperatureEvent.IsOverall">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Sensors.AlarmTriggeredEvent">
            <summary>
            This event is fired when an intruder is in the house and everything is making noise and blinking. It is ON when an intruder is 
            present
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Sensors.AlarmTriggeredEvent.AlarmState">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Notifications.Notification">
            <summary>
            A notification is a type to distribute data.
            Opposed to event this type has no expiry and is designed for less time critical information.
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Actuators.MainAlarmEvent">
            <summary>
            This event is fired when the staus of the alarm is changed meaning when the alarm is activated or not activated.
            This is NOT to be confused by when the alarm is triggered or not, this event has nothing to do with that.
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Actuators.MainAlarmEvent.AlarmState">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Dtd.Entities.Actuators.Password">
            <summary>
            Represents the password
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.Password.#ctor">
            <summary>
            Default constructor, used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.Password.#ctor(Common.Orm.SubsystemItem)">
            <summary>
            Constructor used by the database
            </summary>
            <param name="dbLamb"></param>
        </member>
        <member name="P:Common.Dtd.Entities.Actuators.Password.password">
            <summary>
            Current password
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.PLC.Co2Request">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.PLC.Co2Request.SetPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.IHC.MainAlarmStateRequest">
            <summary>
            This can enable and disable the alarm
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.IHC.MainAlarmStateRequest.State">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.AppService.CLUERoomCO2LevelRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.AppService.CLUERoomCO2LevelRequest.CO2Level">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Sensors.PowerMessurementEvent">
            <summary>
            Defines an event containing power
            </summary>
        </member>
        <member name="M:Common.Messages.Events.Sensors.PowerMessurementEvent.GetValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Common.Messages.Events.Sensors.PowerMessurementEvent.PowerItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Sensors.PowerMessurementEvent.Value">
            <summary>
            The power of the value in watt
            </summary>
        </member>
        <member name="T:Common.Dtd.Entities.Actuators.TemperatureSetPoint">
            <summary>
            Represents a temperature setpoint
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.TemperatureSetPoint.#ctor">
            <summary>
            Default constructor, used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.TemperatureSetPoint.#ctor(Common.Orm.SubsystemItem)">
            <summary>
            Constructor used by the database
            </summary>
            <param name="dbTemperatureSetPoint"></param>
        </member>
        <member name="P:Common.Dtd.Entities.Actuators.TemperatureSetPoint.SetPoint">
            <summary>
            The currently choosen temperature
            </summary>
        </member>
        <member name="M:Common.Helpers.XmlHelper.HexEncode(System.String)">
            <summary>
            Encodes a normal string to a hexidecimal string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.XmlHelper.HexDecode(System.String)">
            <summary>
            Decodes a hexidecimal string to a normal string
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.XmlHelper.HtmlEncode(System.String)">
            <summary>
            Html encodes a string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.XmlHelper.HtmlDecode(System.String)">
            <summary>
            Html decodes a string
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.XmlHelper.RemoveSpecialCharacters(System.String)">
            <summary>
            Removes all special characters
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.XmlHelper.SerializeEvent(Common.Contracts.BusMessage)">
            <summary>
            Serializes an object to xml.
            </summary>
            <param name="myEvent">The event to serialize.</param>
            <returns>The xml.</returns>
        </member>
        <member name="M:Common.Helpers.XmlHelper.Serialize``1(``0)">
            <summary>
            Serializes an object to xml.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
            <param name="obj">The object to serialize.</param>
            <returns>The xml.</returns>
        </member>
        <member name="M:Common.Helpers.XmlHelper.SerializeToFile``1(``0,System.String)">
            <summary>
            Serializes an object to an xml-file.
            The xml file will be overwritten if it exists.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
            <param name="obj">The object to serialize.</param>
            <param name="filePath">The file path to save the xml to. Can be relative.</param>
        </member>
        <member name="M:Common.Helpers.XmlHelper.DeserializeEvent(System.String,System.String)">
            <summary>
            Deserializes xml to an object.
            Use only if type is unknown at compile time.
            </summary>
            <param name="eventTypeStr">The event type name.</param>
            <param name="xml">The object serialized as xml.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Common.Helpers.XmlHelper.DeserializeEvent(System.Type,System.String)">
            <summary>
            Deserializes xml to an object.
            Use only if type is unknown at compile time.
            </summary>
            <param name="eventType">The type of the event.</param>
            <param name="xml">The object serialized as xml.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Common.Helpers.XmlHelper.Deserialize``1(System.String)">
            <summary>
            Deserializes xml to an object.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="xml">The xml.</param>
            <returns>The type of the object to return.</returns>
        </member>
        <member name="M:Common.Helpers.XmlHelper.DeserializeFromFile``1(System.String)">
            <summary>
            Deserializes an xml file to an object.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="filePath">The file path of the xml file. Can be relative.</param>
            <returns>The type of the object to return.</returns>
        </member>
        <member name="T:Common.Messages.Requests.PLC.WindowStateRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.PLC.WindowStateRequest.PositionState">
             <summary>
            
             </summary>
        </member>
        <member name="T:Common.Messages.Requests.PLC.BlindRequest">
            <summary>
            This request can control blinds.
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.PLC.BlindRequest.State">
            <summary>
            The requested state of the blinds.
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.PLC.PowerMessurementStateRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.PLC.PowerMessurementStateRequest.Power">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Sensors.DoorLockEvent">
            <summary>
            This event is fired when the door identified by the base's ressourceId is opened or closed.
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Sensors.DoorLockEvent.State">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Misc.DeviceTokenEvent">
            <summary>
            A Message that telling the CCU that a new device is starting up.
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Misc.DeviceTokenEvent.Token">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.DefaultValues">
            <summary>
            This class contains default values for initialization.
            </summary>
        </member>
        <member name="F:Common.DefaultValues.LIGHTLEVEL">
            <summary>
            The default light level for a dimmable lamp.
            </summary>
        </member>
        <member name="F:Common.DefaultValues.TEMPERATURESETPOINT">
            <summary>
            The default value for a temperature set point.
            This is not specific for water or air.
            </summary>
        </member>
        <member name="T:Common.Clients.Client">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Clients.Client.#ctor(System.Action{Common.Contracts.BusMessage},System.Action{System.String,System.String})">
            <summary>
            Standard constructor
            </summary>
            <param name="onEventFired"></param>
        </member>
        <member name="M:Common.Clients.Client.Initialize">
            <summary>
            Initializes the MSMQ client
            </summary>
        </member>
        <member name="M:Common.Clients.Client.Publish(Common.Contracts.BusMessage)">
            <summary>
            Publishes an event.
            </summary>
            <param name="myEvent">The event to publish.</param>
        </member>
        <member name="M:Common.Clients.Client.PublishGeneric(System.String,System.String)">
            <summary>
            Publishes a generic event.
            </summary>
            <param name="eventTypeStr">The generic event type name.</param>
            <param name="xml">The serialized object as xml.</param>
        </member>
        <member name="M:Common.Clients.Client.Subscribe(Common.Contracts.Subscription)">
            <summary>
            Subscribes to an event.
            </summary>
            <param name="subscription"></param>
        </member>
        <member name="M:Common.Clients.Client.Unsubscribe(Common.Contracts.Subscription)">
            <summary>
            Unsubscribe from an event
            </summary>
            <param name="subscription"></param>
        </member>
        <member name="M:Common.Clients.Client.OnEventFired(Common.Contracts.BusMessage)">
            <summary>
            Gets called when an event is published.
            </summary>
            <param name="myEvent"></param>
        </member>
        <member name="M:Common.Clients.Client.OnGenericEventFired(System.String,System.String)">
            <summary>
            Gets called when a generic event is called.
            </summary>
            <param name="eventTypeStr"></param>
            <param name="xml"></param>
        </member>
        <member name="M:Common.Clients.Client.Dispose">
            <summary>
            Releases all communication objects
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.IHC.ChangeAlarmPasswordRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.IHC.ChangeAlarmPasswordRequest.OldPassword">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.IHC.ChangeAlarmPasswordRequest.NewPassword">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Sensors.ButtonEvent">
            <summary>
            A switch has been pushed.
            </summary>
        </member>
        <member name="M:Common.Messages.Events.Sensors.ButtonEvent.GetValue">
            <summary>
            The state of what resource, the button has changed.
            </summary>
            
        </member>
        <member name="T:Common.Messages.Events.Sensors.RainEvent">
            <summary>
            This event is fired when it starts and stops raining.
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Sensors.RainEvent.IsRaining">
            <summary>
            Determines if it is raining or not.
            Unfortunately it cannot tell how much.
            For this information use the weatherforecast although it is not actual data.
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Actuators.AlarmPasswordEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Actuators.AlarmPasswordEvent.Success">
            <summary>
            Returns the success of the request of changing password.
            </summary>
        </member>
        <member name="T:Common.Dtd.Entities.Actuators.DiodeIndicator">
            <summary>
            Represents a diode
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.DiodeIndicator.#ctor">
            <summary>
            Default constructor, used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.DiodeIndicator.#ctor(Common.Orm.SubsystemItem)">
            <summary>
            Constructor used by the database
            </summary>
            <param name="dbDiodeIndicator"></param>
        </member>
        <member name="P:Common.Dtd.Entities.Actuators.DiodeIndicator.State">
            <summary>
            Current state of the diode
            </summary>
        </member>
        <member name="P:Common.Messages.Responses.CLUEResponse`1.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.PLC.WindowRequest">
            <summary>
            This request changes the state of the window specified by the base's ressourceId.
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.PLC.WindowRequest.PositionState">
            <summary>
            Opens or closes the window depending on state
            </summary>
        </member>
        <member name="P:Common.Messages.Notifications.BCPMNotification.PowerItem">
            <summary>
            Indicates the power item with value
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Sensors.MotionEvent">
            <summary>
            Indicates motion in the area specified by the base's ResourceId
            There are no properties yet. If the sensor can tell something about intensity we should send this along.
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Sensors.MotionEvent.Movement">
            <summary>
            The boolean will indicate if there has been any movement in last X minutes (2 min might be sufficient, so the bus doesn't get bloated with events).
            </summary>
        </member>
        <member name="T:Common.Dtd.Entities.Actuators.PowerOutlet">
            <summary>
            Represents a power outlet
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.PowerOutlet.#ctor">
            <summary>
            Default constructor, used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.PowerOutlet.#ctor(Common.Orm.SubsystemItem)">
            <summary>
            Constructor used by the database
            </summary>
            <param name="dbPowerOutlet"></param>
        </member>
        <member name="P:Common.Dtd.Entities.Actuators.PowerOutlet.State">
            <summary>
            Current state of the power outlet
            </summary>
        </member>
        <member name="M:Common.Contracts.IServer.Start">
            <summary>
            Starts the server
            </summary>
        </member>
        <member name="M:Common.Contracts.IServer.Stop">
            <summary>
            Stops the server
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.IHC.LightStateRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Notifications.CLUEHouseModelNotification">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.BusWorker">
            <summary>
            Abstract class defining a mixed publisher/subscriber.
            </summary>
        </member>
        <member name="M:Common.BusWorker.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Common.BusWorker.Publish(Common.Contracts.BusMessage)">
            <summary>
            Publishes an event to the bus.
            </summary>
            <param name="myEvent">The event to publish.</param>
        </member>
        <member name="M:Common.BusWorker.PublishGeneric(Common.Contracts.BusMessage)">
            <summary>
            Publishes a generic event type.
            </summary>
            <param name="myEvent"></param>
        </member>
        <member name="M:Common.BusWorker.Publish(System.Action,System.DateTime,System.TimeSpan,System.String)">
            <summary>
            Publishes an event to the bus at a specific schedule.
            </summary>
            <param name="publishMethod">The event publishing method to schedule.</param>
            <param name="firstPublish">The time to make the first publish. Should be null or DateTime.MinValue if it should start from now.</param>
            <param name="scheduledTime">The timespan schedule.</param>
            <param name="name">The name for the scheduled publishing - use this if you want to be able to take it down again later.</param>
        </member>
        <member name="M:Common.BusWorker.Publish(System.Action,System.DateTime,System.TimeSpan)">
            <summary>
            Publishes an event to the bus at a specific schedule.
            </summary>
            <param name="publishMethod">The event publishing method to schedule.</param>
            <param name="firstPublish">The time to make the first publish. Should be null or DateTime.MinValue if it should start from now.</param>
            <param name="scheduledTime">The timespan schedule.</param>
        </member>
        <member name="M:Common.BusWorker.RemoveScheduledPublish(System.String)">
            <summary>
            Removes a scheduled publish
            </summary>
            <param name="name">The name of the scheduled publish.</param>
        </member>
        <member name="M:Common.BusWorker.AsyncPublish(System.Object)">
            <summary>
            Used to invoke the scheduled publishing method asynchronously.
            </summary>
            <param name="state">The function parameter.</param>
        </member>
        <member name="M:Common.BusWorker.PublishAndWait``1(Common.Contracts.BusMessage,System.Int32,System.Boolean)">
            <summary>
            Publishes an event to the bus and waits for a specific event to occur with a timeout.
            This method will block until either the event occurs or it times out.
            </summary>
            <typeparam name="T">The type of the event we expect to get back.</typeparam>
            <param name="myEvent">The event to publish.</param>
            <param name="timeout">The timeout in milliseconds.</param>
            <param name="matchId">Specifies whether to match the published event's id with the returned event's id.</param>
            <returns>The specified type of event if there is a match on Id.</returns>
        </member>
        <member name="M:Common.BusWorker.PublishAndWait``1(Common.Contracts.BusMessage,System.Int32)">
            <summary>
            Publishes an event to the bus and waits for a specific event to occur with a timeout.
            This method will block until either the event occurs or it times out.
            </summary>
            <typeparam name="T">The type of the event we expect to get back.</typeparam>
            <param name="myEvent">The event to publish.</param>
            <param name="timeout">The timeout in milliseconds.</param>
            <returns>The specified type.</returns>
        </member>
        <member name="M:Common.BusWorker.Subscribe(System.String)">
            <summary>
            Subscribe to an event on the bus.
            Use only if type is unknown at compile time.
            </summary>
            <param name="eventTypeStr">The event type name to subscribe to.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe(System.String,System.Boolean)">
            <summary>
            Subscribe to an event on the bus.
            Use only if type is unknown at compile time.
            </summary>
            <param name="eventTypeStr">The event type name to subscribe to.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be subscribed to also.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe(System.String,System.Boolean,System.Boolean)">
            <summary>
            Subscribe to an event on the bus.
            Use only if type is unknown at compile time.
            </summary>
            <param name="eventTypeStr">The event type name to subscribe to.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be subscribed to also.</param>
            <param name="includeGenericSubClasses">Determines whether all subclasses should be subscribed to also.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe(System.Type)">
            <summary>
            Subscribe to an event on the bus.
            Use only if type is unknown at compile time. 
            </summary>
            <param name="eventType">The event type to subscribe to.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe(System.Type,System.Boolean)">
            <summary>
            Subscribe to an event on the bus.
            Use only if type is unknown at compile time. 
            </summary>
            <param name="eventType">The event type to subscribe to.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be subscribed to also.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Subscribe to an event on the bus.
            Use only if type is unknown at compile time. 
            </summary>
            <param name="eventType">The event type to subscribe to.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be subscribed to also.</param>
            <param name="includeGenericSubClasses">Determines whether all generic subclasses should be subscribed to also.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe``1">
            <summary>
            Subscribe to an event on the bus.
            </summary>
            <typeparam name="T">The event type to subscribe to.</typeparam>
        </member>
        <member name="M:Common.BusWorker.Subscribe``1(System.Boolean)">
            <summary>
            Subscribe to an event on the bus.
            </summary>
            <typeparam name="T">The event type to subscribe to.</typeparam>
            <param name="includeSubClasses">Determines whether all subclasses should be subscribed to also.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe``1(System.Boolean,System.Boolean)">
            <summary>
            Subscribe to an event on the bus.
            </summary>
            <typeparam name="T">The event type to subscribe to.</typeparam>
            <param name="includeSubClasses">Determines whether all subclasses should be subscribed to also.</param>
            <param name="includeGenericSubClasses">Determines whether all generic subclasses should be subscribed to also.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe``1(System.Boolean,System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Subscribe to an event on the bus.
            </summary>
            <typeparam name="T">The event type to subscribe to.</typeparam>
            <param name="includeSubClasses">Determines whether all subclasses should be subscribed to also.</param>
            <param name="includeGenericSubClasses">Determines whether all generic subclasses should be subscribed to also.</param>
            <param name="predicate">A predicate that the subscribed type has to fulfil.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribes and registers an eventhandler.
            </summary>
            <typeparam name="T">The type of the event.</typeparam>
            <param name="eventHandler">The event handler to register.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Subscribes and registers an eventhandler.
            </summary>
            <typeparam name="T">The type of the event.</typeparam>
            <param name="eventHandler">The event handler to register.</param>
            <param name="predicate">A predicate that the subscribed type has to fulfil.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe``1(System.Action{``0},System.Boolean)">
            <summary>
            Subscribes and registers an eventhandler.
            </summary>
            <typeparam name="T">The type of the event.</typeparam>
            <param name="eventHandler">The event handler to register.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be subscribed to also.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe``1(System.Action{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Subscribes and registers an eventhandler.
            </summary>
            <typeparam name="T">The type of the event.</typeparam>
            <param name="eventHandler">The event handler to register.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be subscribed to also.</param>
            <param name="predicate">A predicate that the subscribed type has to fulfil.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe``1(System.Action{``0},System.Boolean,System.Boolean)">
            <summary>
            Subscribes and registers an eventhandler.
            </summary>
            <typeparam name="T">The type of the event.</typeparam>
            <param name="eventHandler">The event handler to register.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be subscribed to also.</param>
            <param name="includeGenericSubClasses">Determines whether all generic subclasses should be subscribed to also.</param>
        </member>
        <member name="M:Common.BusWorker.Subscribe``1(System.Action{``0},System.Boolean,System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Subscribes and registers an eventhandler.
            </summary>
            <typeparam name="T">The type of the event.</typeparam>
            <param name="eventHandler">The event handler to register.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be subscribed to also.</param>
            <param name="includeGenericSubClasses">Determines whether all generic subclasses should be subscribed to also.</param>
            <param name="predicate">A predicate that the subscribed type has to fulfil.</param>
        </member>
        <member name="M:Common.BusWorker.SubscribeAll">
            <summary>
            Subscribe to everything on the bus.
            </summary>
        </member>
        <member name="M:Common.BusWorker.Unsubscribe(System.String)">
            <summary>
            Unsubscribe from an event.
            Use only if type is unknown at compile time.
            </summary>
            <param name="eventTypeStr">The event type name to unsubscribe from.</param>
        </member>
        <member name="M:Common.BusWorker.Unsubscribe(System.String,System.Boolean)">
            <summary>
            Unsubscribe from an event.
            Use only if type is unknown at compile time.
            </summary>
            <param name="eventTypeStr">The event type name to unsubscribe from.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be unsubscribed from also.</param>
        </member>
        <member name="M:Common.BusWorker.Unsubscribe(System.String,System.Boolean,System.Boolean)">
            <summary>
            Unsubscribe from an event.
            Use only if type is unknown at compile time.
            </summary>
            <param name="eventTypeStr">The event type name to unsubscribe from.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be unsubscribed from also.</param>
            <param name="includeGenericSubClasses">Determines whether all generic subclasses should be unsubscribed from also.</param>
        </member>
        <member name="M:Common.BusWorker.Unsubscribe(System.Type)">
            <summary>
            Unsubscribe from an event on the bus.
            Use only if type is unknown at compile time. 
            </summary>
            <param name="eventType">The event type to unsubscribe from.</param>
        </member>
        <member name="M:Common.BusWorker.Unsubscribe(System.Type,System.Boolean)">
            <summary>
            Unsubscribe from an event on the bus.
            Use only if type is unknown at compile time. 
            </summary>
            <param name="eventType">The event type to unsubscribe from.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be unsubscribed from also.</param>
        </member>
        <member name="M:Common.BusWorker.Unsubscribe(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Unsubscribe from an event on the bus.
            Use only if type is unknown at compile time. 
            </summary>
            <param name="eventType">The event type to unsubscribe from.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be unsubscribed from also.</param>
            <param name="includeGenericSubClasses">Determines whether all generic subclasses should be unsubscribed from also.</param>
        </member>
        <member name="M:Common.BusWorker.Unsubscribe``1">
            <summary>
            Unsubscribe from an event on the bus.
            </summary>
            <typeparam name="T">The event type to unsubscribe from.</typeparam>
        </member>
        <member name="M:Common.BusWorker.Unsubscribe``1(System.Boolean)">
            <summary>
            Unsubscribe from an event on the bus.
            </summary>
            <typeparam name="T">The event type to unsubscribe from.</typeparam>
            <param name="includeSubClasses">Determines whether all subclasses should be unsubscribed from also.</param>
        </member>
        <member name="M:Common.BusWorker.Unsubscribe``1(System.Boolean,System.Boolean)">
            <summary>
            Unsubscribe from an event on the bus.
            </summary>
            <typeparam name="T">The event type to unsubscribe from.</typeparam>
            <param name="includeSubClasses">Determines whether all subclasses should be unsubscribed from also.</param>
            <param name="includeGenericSubClasses">Determines whether all generic subclasses should be unsubscribed from also.</param>
        </member>
        <member name="M:Common.BusWorker.UnsubscribeAll">
            <summary>
            Unsubscribe from everything that is subscribed to on the bus.
            </summary>
        </member>
        <member name="M:Common.BusWorker.GetSubscriptions">
            <summary>
            Gets the list of types currently subscribed to.
            </summary>
            <returns>A list of types.</returns>
        </member>
        <member name="M:Common.BusWorker.HandleSubscription(Common.BusWorker.HandleSubscriptionDelegate{Common.Contracts.BusMessage},System.Type,System.Boolean,System.Boolean)">
            <summary>
            Handles a subscription.
            If type is not known at compile time this method will ensure that only subscribers to types deriving from 'Event' will be handled
            </summary>
            <param name="handler">The handler to invoke.</param>
            <param name="eventType">The type it should handle.</param>
            <param name="includeSubClasses">Determines whether all subclasses should be handled also.</param>
            <param name="includeGenericSubClasses">Determines whether all subclass of a generic should be handled also.</param>
        </member>
        <member name="M:Common.BusWorker.RegisterEventHandler(System.Action{Common.Contracts.BusMessage},System.String)">
            <summary>
            Registers an event handler for subscribed events.
            Use only if type is unknown at compile time.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="eventTypeStr">The event type name to subscribe to.</param>
        </member>
        <member name="M:Common.BusWorker.RegisterEventHandler(System.Action{Common.Contracts.BusMessage},System.Type)">
            <summary>
            Registers an event handler for subscribed events.
            Use only if type is unknown at compile time.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="eventType">The event type to subscribe to.</param>
        </member>
        <member name="M:Common.BusWorker.RegisterEventHandler``1(System.Action{``0})">
            <summary>
            Registers an event handler for subscribed events.
            </summary>
            <typeparam name="T">The event type to unsubscribe from.</typeparam>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="M:Common.BusWorker.OnEventFired(Common.Contracts.BusMessage)">
            <summary>
            Gets called when a subscribed event is published.
            It passes the event on to the derived class asynchronously.
            Do not use this method from the 'outside'.
            </summary>
            <param name="myEvent">The event that has been published.</param>
        </member>
        <member name="M:Common.BusWorker.OnPublishCallback(Common.Contracts.BusMessage)">
            <summary>
            Gets called when a subscribed event is published.
            It sets a handle signalling a waiting method to proceed.
            This method is used for 'synchronous' publishing.
            </summary>
            <param name="myEvent">The event that has been published.</param>
        </member>
        <member name="M:Common.BusWorker.Dispose">
            <summary>
            Cleans up WCF connections.
            NOTICE: Does not unsubscribe from anything.
            </summary>
        </member>
        <member name="T:Common.BusWorker.HandleSubscriptionDelegate`1">
            <summary>
            Delegate for handling subscriptions when type is unknown at compile time.
            </summary>
            <typeparam name="T">The event type to handle.</typeparam>
            <param name="includeSubClasses">Determines whether all subclasses should be subscribed to also.</param>
        </member>
        <member name="T:Common.Messages.Database.DatabaseRequest`1">
            <summary>
            This messagetype is used on the bus to ask the Database for data
            </summary>
            <typeparam name="T">The type of data to be requested</typeparam>
        </member>
        <member name="P:Common.Messages.Database.DatabaseRequest`1.ID">
            <summary>
            The database ID of the object requested
            </summary>
        </member>
        <member name="P:Common.Messages.Database.DatabaseRequest`1.Name">
            <summary>
            The database Name of the object requested
            </summary>
        </member>
        <member name="P:Common.Messages.Database.DatabaseRequest`1.Children">
            <summary>
            Used for Groups to also get their child groups
            </summary>
        </member>
        <member name="P:Common.Messages.Database.DatabaseRequest`1.EventID">
            <summary>
            Used for Events
            </summary>
        </member>
        <member name="P:Common.Messages.Database.DatabaseRequest`1.Start">
            <summary>
            Used for Events
            </summary>
        </member>
        <member name="P:Common.Messages.Database.DatabaseRequest`1.End">
            <summary>
            Used for Events
            </summary>
        </member>
        <member name="M:Common.Helpers.BusHelper.EnsureInitialized">
            <summary>
            Ensures that all types are in memory
            </summary>
        </member>
        <member name="M:Common.Helpers.BusHelper.CheckAndAddType(System.Type)">
            <summary>
            Takes care of special hidden system types that we want to include but is only possible at run time
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Common.Helpers.BusHelper.IsValidSystemType(System.Type)">
            <summary>
            Determines whether a type is a valid system type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.GetValidSubscription(System.String)">
            <summary>
            Gets a valid type for a subscription based on its name.
            If no valid type is found, null is returned.
            </summary>
            <param name="typeStr">The type name.</param>
            <returns>A valid type if such one exists</returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.IsValidSubscription(System.String)">
            <summary>
            Determines whether a type is a valid subscription.
            </summary>
            <param name="typeStr">The type name to determine.</param>
            <returns>A bool indicating whether the type is valid.</returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.IsValidSubscription(System.Type)">
            <summary>
            Determines whether a type is a valid subscription.
            </summary>
            <param name="type">The type to determine.</param>
            <returns>A bool indicating whether the type is valid.</returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.IsOfGenericType(System.Type,System.Type)">
            <summary>
            Tests whether a type is of another generic type.
            </summary>
            <param name="genericType">The generic type to test</param>
            <param name="target">The type to validate against</param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.GetPossibleSubscriptions">
            <summary>
            Gets a list of types that are possible to subscribe to. Includes generic types.
            </summary>
            <returns>A list of valid types</returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.GetSubTypes(System.Type,System.Boolean)">
            <summary>
            Get all valid sub classes of a certain class.
            </summary>
            <param name="eventType">The type of the busmessage.</param>
            <param name="includeParent">Specifies whether the parent type should be included in the list.</param>
            <returns>A list of types.</returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.GetServiceValidType(System.String)">
            <summary>
            Gets a valid type for the services on the bus based on its name.
            If no valid type is found, null is returned.
            </summary>
            <param name="typeStr"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.IsServiceValidType(System.Type)">
            <summary>
            Determines whether a type is valid type to use in the services on the bus.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.GetServiceKnownTypes(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Gets the known types for a service contract. Excludes generic types.
            This method is called by WCF at run time.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.GetServiceKnownTypes">
            <summary>
            Gets the known types for a service contract. Excludes generic types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.GetServiceKnownTypes(System.Boolean)">
            <summary>
            Gets the known types for a service contract.
            </summary>
            <param name="includeGenerics">Specifies whether generics should be included.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.EnsureQueueExists(System.String)">
            <summary>
            Create a queue if it does not exist
            </summary>
            <param name="queueName"></param>
        </member>
        <member name="M:Common.Helpers.BusHelper.DeleteQueue(System.String)">
            <summary>
            Deletes a queue
            </summary>
            <param name="queueName"></param>
        </member>
        <member name="M:Common.Helpers.BusHelper.IsServiceHostOpen(System.ServiceModel.ServiceHost)">
            <summary>
            Determines whether a service host is open
            </summary>
            <param name="serviceHost"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.IsChannelFactoryOpen``1(System.ServiceModel.ChannelFactory{``0})">
            <summary>
            Determines whether a channel factory is open
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channelFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.IsClientChannelOpen(System.ServiceModel.IClientChannel)">
            <summary>
            Determines whether a client channel is open
            </summary>
            <param name="clientChannel"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Helpers.BusHelper.CloseServiceHost(System.ServiceModel.ServiceHost)">
            <summary>
            Closes a service host
            </summary>
            <param name="serviceHost"></param>
        </member>
        <member name="M:Common.Helpers.BusHelper.CloseChannelFactory``1(System.ServiceModel.ChannelFactory{``0})">
            <summary>
            Closes a channel factory
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channelFactory"></param>
        </member>
        <member name="M:Common.Helpers.BusHelper.CloseClientChannel(System.ServiceModel.IClientChannel)">
            <summary>
            Closes a client channel
            </summary>
            <param name="clientChannel"></param>
        </member>
        <member name="T:Common.Messages.Requests.IHC.ButtonRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Actuators.LightEvent">
            <summary>
            Light event
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Actuators.LightEvent.SetPoint">
            <summary>
            Percentage of a dimmable light
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Actuators.LightEvent.State">
            <summary>
            States the current status of the light.
            </summary>
        </member>
        <member name="T:Common.Dtd.Entities.Actuators.DimmableLamp">
            <summary>
            Represents a dimmable lamp
            </summary>
        </member>
        <member name="T:Common.Dtd.Entities.Actuators.Lamp">
            <summary>
            Represents a lamp
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.Lamp.#ctor">
            <summary>
            Default constructor, used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.Lamp.#ctor(Common.Orm.SubsystemItem)">
            <summary>
            Constructor used by the database
            </summary>
            <param name="dbLamb"></param>
        </member>
        <member name="P:Common.Dtd.Entities.Actuators.Lamp.State">
            <summary>
            Current state of the lamp
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.DimmableLamp.#ctor">
            <summary>
            Default constructor used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.DimmableLamp.#ctor(Common.Orm.SubsystemItem)">
            <summary>
            Constuctor used by the database
            </summary>
            <param name="dbDimmableLamp"></param>
        </member>
        <member name="T:Common.Messages.Events.UserLocation.NewHomeLocationEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Events.UserLocation.NewHomeLocationEvent.Longitude">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Events.UserLocation.NewHomeLocationEvent.Latitude">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Data.Weather.ExtendedWeatherForecast">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Data.Weather.ExtendedWeather">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.AppService.CLUEHouseModelRequest">
            <summary>
            Will request the model of the house and expecting a 'CLUEHouseModelNotification'
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.IHC.PowerOutletRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.IHC.PowerOutletRequest.State">
            <summary>
            State of the power Outlet
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.IHC.ConstantLightRequest">
            <summary>
            This can Switch constant lighting on/off
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.IHC.ConstantLightRequest.State">
            <summary>
            The requested state of the constant light
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Sensors.LuxEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Messages.Events.Sensors.LuxEvent.GetValue">
            <summary>
            Gets the value read from the lux sensor
            </summary>
            <returns></returns>
        </member>
        <member name="P:Common.Messages.Events.Sensors.LuxEvent.LightLevel">
            <summary>
            A value showing the Lux-level of the sensor
            </summary>
        </member>
        <member name="T:Common.Dtd.Entities.Actuators.Door">
            <summary>
            Represents a door
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.Door.#ctor">
            <summary>
            Default constructor, used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.Door.#ctor(Common.Orm.SubsystemItem)">
            <summary>
            Constructor used by the database
            </summary>
            <param name="dbDoor"></param>
        </member>
        <member name="P:Common.Dtd.Entities.Actuators.Door.State">
            <summary>
            Current state of the door
            </summary>
        </member>
        <member name="T:Common.Messages.Database.DatabaseResponse`1">
            <summary>
            Send by the Database when data is ready for those that requested it
            </summary>
            <typeparam name="T">The type of date being returned</typeparam>
        </member>
        <member name="P:Common.Messages.Database.DatabaseResponse`1.Data">
            <summary>
            The data that the bus member asked for
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.AppService.HomeSetRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.AppService.HomeSetRequest.Longitude">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.AppService.HomeSetRequest.Latitude">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.IHC.DoorLockStateRequest">
            <summary>
            This can lock and unlock the door.
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.AppService.CLUERoomHumidityLevelRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.AppService.CLUERoomHumidityLevelRequest.HumidityLevel">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Events.Actuators.PowerOutletEvent">
            <summary>
            Power Outlet event
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Actuators.PowerOutletEvent.State">
            <summary>
            States the current status of the switchable Power Outlet.
            </summary>
        </member>
        <member name="T:Common.Helpers.GuidMapper">
            <summary>
            Helper class for mapping between local ids and guids
            </summary>
        </member>
        <member name="M:Common.Helpers.GuidMapper.GetGuid(System.String)">
            <summary>
            Maps a local id to a guid. Also ensures that a mapping exists.
            </summary>
            <param name="localId"></param>
        </member>
        <member name="M:Common.Helpers.GuidMapper.EnsureMappingExists(System.String)">
            <summary>
            Ensures that a mapping exists for a given local id
            </summary>
            <param name="localId"></param>
        </member>
        <member name="M:Common.Helpers.GuidMapper.GetLocalId(System.Guid)">
            <summary>
            Maps a guid to a local id.
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="T:Common.Contracts.PositionState">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Contracts.LockState">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Contracts.ToggleState">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.AppService.WeatherForecastRequest">
            <summary>
            Requests a new weather forecast
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.AppService.WeatherForecastRequest.Latitude">
            <summary>
            If set to true the forecast service will not use cache.
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.AppService.WeatherForecastRequest.Longitude">
            <summary>
            If set to true the forecast service will not use cache.
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.AppService.WeatherForecastRequest.Refresh">
            <summary>
            If set to true the forecast service will not use cache.
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.AppService.WeatherForecastRequest.Extended">
            <summary>
            Determines if the forecast shoudl be extended.
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.IHC.MainAlarmRequest">
            <summary>
            This can enable and disable the alarm
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.IHC.MainAlarmRequest.State">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.IHC.MainAlarmRequest.Password">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.IHC.SoundGeneratorRequest">
            <summary>
            This can switch on/off a sound Generator in the IHC.
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.IHC.SoundGeneratorRequest.State">
            <summary>
            The requested state of the Soundgenerator
            </summary>
        </member>
        <member name="T:Common.Messages.Events.WindowEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Events.WindowEvent.State">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Events.UserLocation.UserLocationEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Events.UserLocation.UserLocationEvent.DeviceToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Events.UserLocation.UserLocationEvent.Location">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Events.UserLocation.UserLocationEvent.TimeTillHome">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Helpers.ConfigHelper">
            <summary>
            Helper class for accessing the config file
            </summary>
        </member>
        <member name="M:Common.Helpers.ConfigHelper.GetSettingFromConfig``1(System.String)">
            <summary>
            Gets a setting from the AppSettings section from app.config or web.config
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appSettingsName"></param>
            <returns>The value as the given type argument</returns>
        </member>
        <member name="M:Common.Helpers.ConfigHelper.GetListFromConfig(System.String)">
            <summary>
            Gets a setting from app.config or web.config as a list.
            That is, if the setting is separated by , or ; or | it is returned as a list of strings
            </summary>
            <param name="appSettingsName"></param>
            <returns></returns>
        </member>
        <member name="T:Common.Messages.Requests.PLC.TemperatureStateRequest">
            <summary>
            Will return the state of all temperature sensors.
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.PLC.Co2StateRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.AppService.CLUERoomTemperatureRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.AppService.CLUERoomTemperatureRequest.Temperature">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Messages.Events.Sensors.HumidityEvent.Humidity">
            <summary>
            A value showing the humidity-level in % of a given humidity sensor resource.
            </summary>
        </member>
        <member name="T:Common.Dtd.DeviceType">
            <summary>
            Represents a device type
            </summary>
        </member>
        <member name="M:Common.Dtd.DeviceType.#ctor">
            <summary>
            Default constructor, used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.DeviceType.#ctor(Common.Orm.DeviceType)">
            <summary>
            Constructor used by the database
            </summary>
            <param name="dbDeviceType"></param>
        </member>
        <member name="P:Common.Dtd.DeviceType.Name">
            <summary>
            The name of the device type
            </summary>
        </member>
        <member name="T:Common.Dtd.Entities.Actuators.MainAlarm">
            <summary>
            Represents the main alarm in the house
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.MainAlarm.#ctor">
            <summary>
            Default constructor, used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.MainAlarm.#ctor(Common.Orm.SubsystemItem)">
            <summary>
            Constructor used by the database
            </summary>
            <param name="dbAlarm"></param>
        </member>
        <member name="P:Common.Dtd.Entities.Actuators.MainAlarm.State">
            <summary>
            Current known state of the Alarm
            </summary>
        </member>
        <member name="T:Common.Messages.Requests.PLC.BlindStateRequest">
            <summary>
            This request can control blinds.
            </summary>
        </member>
        <member name="P:Common.Messages.Requests.PLC.BlindStateRequest.State">
            <summary>
            The requested state of the blinds.
            </summary>
        </member>
        <member name="T:Common.Dtd.Entities.Actuators.Blind">
            <summary>
            Represents blinds
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.Blind.#ctor">
            <summary>
            Default constructor, used by WCF
            </summary>
        </member>
        <member name="M:Common.Dtd.Entities.Actuators.Blind.#ctor(Common.Orm.SubsystemItem)">
            <summary>
            Constructor used by the database
            </summary>
            <param name="dbBlind"></param>
        </member>
        <member name="P:Common.Dtd.Entities.Actuators.Blind.State">
            <summary>
            Current state of the blind
            </summary>
        </member>
    </members>
</doc>
